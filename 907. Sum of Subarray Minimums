class Solution {

private:
 
    vector<int> findNse(vector<int>& arr)
    {
        int n = arr.size();
        stack<int> st;
        vector<int> nse(n);
        for (int i=n-1;i>=0;i--)
        {
            while(!st.empty() && arr[st.top()] >= arr[i])
            {
                st.pop();
            }

            nse[i] = !st.empty() ? st.top() : n;
            st.push(i);
        }
        return nse;
    }

    vector<int> findPse(vector<int>& arr)
    {
        int n = arr.size();
        stack<int> st;
        vector<int> pse(n);
        for (int i=0;i<n;i++)
        {
            while(!st.empty() && arr[st.top()] > arr[i])
            {
                st.pop();
            }

            pse[i] = !st.empty() ? st.top() : -1;
            st.push(i);
        }
        return pse;
    }


public:
    int sumSubarrayMins(vector<int>& arr) {
        int n = arr.size();
        vector<int> nse = findNse(arr);
        vector<int> pse = findPse(arr);

        int total = 0;
        int mod = (int)(1e9+7);

        for (int i=0;i<n;i++)
        {
            int left = i-pse[i];
            int right = nse[i] - i;

            total = (total + (right*left*1ll*arr[i])%mod)%mod;
        }
        return total;
    }
};
