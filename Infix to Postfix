class Solution {
    
    private: 
    
    int priority(char c)
    {
        int p=0;
        if (c == '^')
        {
            p=3;
        }
        else if (c == '*' || c == '/')
        {
            p=2;
        }
        else if (c == '+' || c == '-')
        {
            p=1;
        }
        else
        {
            p = -1;
        }
        return p;
    }
  public:
    string infixToPostfix(string& s) {
        // code here
        int n = s.length();
        int i = 0;
        string ans;
        stack<char> st;
        while (i<n)
        {
            if ((s[i] >= 'A' && s[i] <= 'Z') || (s[i] >= 'a' && s[i] <= 'z') || (s[i] >= '0' && s[i] <= '9'))
            {
                ans.push_back(s[i]);
            }
            else if (s[i] == '(')
            {
                st.push(s[i]);
            }
            else if (s[i] == ')')
            {
                while (!st.empty() && st.top()!='(')
                {
                    ans.push_back(st.top());
                    st.pop();
                }
                if (!st.empty()) st.pop();
            }
            else
            {
                while (!st.empty() && st.top() != '(' && priority(s[i]) <= priority(st.top()))
                {
                    ans.push_back(st.top());
                    st.pop();
                }
                st.push(s[i]);
            }
            i++;
        }
        while (!st.empty())
        {
            ans.push_back(st.top());
            st.pop();
        }
        return ans;
        
    }
};
